#!/bin/bash

###########################################################################
# Installation script for Rob's tweaked git settings and streamlined config
############################################################################

GITSETUP=temp-gitsetup
function pause(){
   read -p "$*"
}

function readData(){
    if [[ $FULLNAME == '' ]]
    then
        FULLNAME=`whatsmyname`
    fi

    if [[ $DASL_USER == '' ]]
    then
        DASL_USER=`echo "$FULLNAME" | sed 's/\ //'`
        DASL_USER=`echo "$DASL_USER" | sed 's/^\(.\)/\L\1/'`
    fi
    read -e -p "Please enter your full name:" -i "$FULLNAME" FULLNAME
    read -e -p "Please enter your email address:" -i "$EMAIL" EMAIL
    read -e -p "Now your DASL server user name:" -i "$DASL_USER" DASL_USER
    
    if [[ ${#GITHUB_USER} == 0 ]]
    then
        GITHUB_USER=$DASL_USER
    fi
    read -e -p "Finally, your Github user name:" -i "$GITHUB_USER" GITHUB_USER
    echo "For read-only github URLs, would you like to use"
    read -p "Public Key authentication when attempting to push? [y/N]:" AUTH_METHOD

    echo "Your information as entered is as follows:"
    echo "Author Name is      : $FULLNAME"
    echo "Email is            : $EMAIL"
    echo "DASL User name is   : $DASL_USER"
    echo "github User name is : $GITHUB_USER"
    if [[ $AUTH_METHOD == 'Y' || $AUTH_METHOD == 'y' ]]
    then
        GITHUB_PUSH_URL="git@github.com:$GITHUB_USER\/"
    else
        GITHUB_PUSH_URL="https:\/\/$GITHUB_USER@github.com\/$GITHUB_USER\/"
        AUTH_METHOD='N'
    fi
    echo "Use SSH Public Key Authentication for Github? $AUTH_METHOD" 
    
    read -p 'Are these correct? [Y/n]' DATAOK
}

function bashrc_source() {

local SOURCED_SEARCH=`grep $1 ~/.bashrc`

if [[ ${#SOURCED_SEARCH} == 0 ]]
then
    cp $1 ~/$1
    echo "source $1" >> ~/.bashrc
fi
}

#1) Extract gitsetup archive from the master branch
wget https://github.com/robEllenberg/gitsetup/zipball/master -O gitsetup.zip
unzip -j gitsetup.zip -d $GITSETUP
cd $GITSETUP
ls

read -p "files extracted, press key to continue..."

#make sure handy bash functions are available
source .bash_functions
DATAOK='N'

while [[ $DATAOK == 'N' || $DATAOK == 'n' ]]
do
    readData
done
#echo $GITHUB_PUSH_URL

# Backup old git files for user
mv ~/.gitconfig ~/.gitconfig.old
mv ~/.gitignore ~/.gitignore.old
#Super ugly field replacement
#TODO: Store the user data in a table for future use, or be smarter about default values
sed -e "s/<FIRST> <LAST>/$FULLNAME/g" -e "s/<EMAIL>/$EMAIL/g" -e "s/<DASL_USER>/$DASL_USER/g" -e "s/<GITHUB_USER>/$GITHUB_USER/g" -e "s/<GITHUB_PUSH_URL>/$GITHUB_PUSH_URL/g"  .gitconfig_template > ~/.gitconfig

#Copy over important files
cp .gitignore ~/.gitignore
cp .git-completion.bash ~/.git-completion.bash

#copy and source files if they don't exist
bashrc_source ".git-prompt.bash"
bashrc_source ".bash_functions"

#Finally, optionally clean up source files
read -p "Would you like to remove the temporary folder $GITSETUP [Y/n]?" -i 'Y' CLEAN_FOLDER

if [[ $CLEAN_FOLDER == 'y' || $CLEAN_FOLDER == 'Y' ]]
then
    echo "Removing folder $GITSETUP"
    cd ..
    rm -rf $GITSETUP
fi
