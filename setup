#!/bin/bash
###########################################################################
# Installation script for Rob's tweaked git settings and streamlined config
# See DASL git wiki for detailed setup and usage instructions for git and the
# DASL server.
# Author: Robert W. Ellenberg
############################################################################

#Initialization of misc vars and flags

#Check if working in Mingw32 windows environment vs. linux or mac
MINGW_STRING=`uname | grep "MINGW"`
if [[ ${#MINGW_STRING} == 0 ]]
then
    MINGW_CHECK=false
else
    MINGW_CHECK=true
fi

#Some useful functions for this script.
function whatsmyname() {
# look up your username in the passwd file, then strip out just the name and extraneous characters.
if [[ $MINGW_CHECK == false ]]
then
    getent passwd `whoami` | cut -d ':' -f 5 | sed 's/,//g'
else
    whoami | sed 's/\\/\n/g' | tail -n 1
fi
}

function hline(){
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

function readData(){
    #Search for current names from .gitconfig, then find default full name from
    #the current user's passwd entry, otherwise keep the old entry.
    if [[ $FULLNAME == '' ]]
    then
        FULLNAME=`git config --get user.name`
    fi
    if [[ $FULLNAME == '' ]]
    then
        FULLNAME=`whatsmyname`
    fi

    if [[ $EMAIL == '' ]]
    then
        #Strip email out of current .gitconfig
        EMAIL=`git config --get user.email`
    fi

    easyread "Please enter your full name" "$FULLNAME";FULLNAME=$REPLY
    easyread "Please enter your email address" "$EMAIL";EMAIL=$REPLY
    
    echo -e "\nA .gitignore file in your home folder tells git to ignore\nfiles that shouldn't be added to a repository."
    read -p "Use included .gitignore file? [Y/n]:" GITIGNORE_BASIC
    if [[ ${#GITIGNORE_BASIC} == 0 ]]
    then
        GITIGNORE_BASIC='Y'
    fi

    hline 
    echo "Your information as entered is as follows:"
    echo "Author Name         : $FULLNAME"
    echo "Email               : $EMAIL"
    echo "Use .gitignore file : $GITIGNORE_BASIC"
    read -p 'Are these correct? [Y/n]:' DATAOK
    if [[ ${#DATAOK} == 0 ]]
    then
        DATAOK='Y'
    fi
}

function bashrc_source() {

local SOURCED_SEARCH=`grep $1 ~/.bashrc`

if [[ ${#SOURCED_SEARCH} == 0 ]]
then
    cp $1 ~/$1
    echo "source ~/$1" >> ~/.bashrc
fi
}

function easyread() {
if [[ $MINGW_CHECK == false ]]
then
    read -e -p "$1:" -i "$2"
else
    read -e -p "$1 [$2]:"
fi
#Copy default value into return field
if [[ $REPLY == '' ]]
then
    REPLY=$2
fi
}

###############################################################################
# Script section
###############################################################################

# Optionally install recommended git tools and accessories
INSTALL_APPS='N'
read -p 'Install recommended support applications? [y/N]' INSTALL_APPS
if [[ $INSTALL_APPS == 'Y' || $INSTALL_APPS == 'y'  && $MINGW_CHECK == false ]]
then
    sudo apt-get install git-core vim-gtk gitg gitk
fi

DATAOK='N'

while [[ ! $DATAOK == 'Y' && ! $DATAOK == 'y' ]]
do
    readData
done

# Backup old git files for user
mv ~/.gitconfig ~/.gitconfig.old
mv ~/.gitignore ~/.gitignore.old
#Super ugly field replacement
#TODO: Store the user data in a table for future use, or be smarter about default values
hline
echo "Generating .gitconfig file from your information..."
sed -e "s/<FIRST> <LAST>/$FULLNAME/g" -e "s/<EMAIL>/$EMAIL/g" .gitconfig_template > ~/.gitconfig

# Setup Git Prompt (ignore for windows). This colored prompt showes
# useful information, like repo status.
if [[ $MINGW_CHECK == false ]]
then
    echo "Setting up colored bash prompt for git repositories..."
    bashrc_source ".git-prompt.bash"
    bashrc_source ".git-script-extras.bash"
fi

#Optionally set up tweaked gitignore file based on common exclusions
if [[ $GITIGNORE_BASIC == 'Y' || $GITIGNORE_BASIC == 'y' || ${#GITIGNORE_BASIC} == 0 ]]
then
    cp .gitignore ~/.gitignore
fi

hline
echo "Setup complete!"
hline
